import gzip
import re
from collections import deque


class MAEExtractor:
    """
    Extracts the lowest energy conformer from a .maegz file.
    Macromodel conformer searches produce -out.maegz files containing
    all of the conformers found during the search and their energies
    and other data.
    Initializing this class with a :class:`.ConstructedMolecule` finds
    the ``-out.maegz`` file of that :class:`.ConstructedMolecule` and
    converts it to a ``.mae`` file. It then creates and additional
    ``.mae`` file holding only the lowest energy conformer found.
    Attributes
    ----------
    maegz_path : :class:`str`
        The path to the ``-out.maegz`` file generated by the macromodel
        conformer search.
    mae_path : :class:`str`
        The path to the ``.mae`` file holding the conformers generated
        by the macromodel conformer search.
    content : :class:`str`
        The content of the ``.mae`` file hodling all the conformers
        from the macromodel conformer search. This holds other data
        such as their energies too.
    energies : :class:`list`
        The :class:`list` has the form
        .. code-block:: python
            energies = [(0, 231.0), (1, 144.4), ...]
        Each :class:`tuple` holds the id and energy of every conformer
        in the ``.mae`` file, respectively.
    min_energy : :class:`float`
        The minimum energy found in the ``.mae`` file.
    path : :class:`str`
        The full path of the ``.mae`` file holding the extracted lowest
        energy conformer.
    """

    def __init__(self, run_name, n=1):
        self.maegz_path = f'{run_name}-out.maegz'
        self.maegz_to_mae()
        self.extract_conformers(n)

    def extract_conformers(self, n):
        """
        Creates ``.mae`` files holding the lowest energy conformers.
        Parameters
        ----------
        n : :class:`int`
            The number of conformers to extract.
        Returns
        -------
        None : :class:`NoneType`
        """

        for i in range(n):
            # Get the id of the lowest energy conformer.
            num = self.lowest_energy_conformers(n)[i][1]
            # Get the structure block corresponding to the lowest
            # energy conformer.
            content = self.content.split("f_m_ct")
            new_mae = "f_m_ct".join([content[0], content[num]])

            # Write the structure block in its own .mae file, named
            # after conformer extracted.
            if n == 1:
                # Write the structure block in its own .mae file, named
                # after conformer extracted.
                new_name = self.mae_path.replace(
                    '.mae',
                    f'EXTRACTED_{num}.mae'
                )
            else:
                new_name = self.mae_path.replace(
                    '.mae',
                    f'EXTRACTED_{num}_conf_{i}.mae'
                )

            with open(new_name, 'w') as mae_file:
                mae_file.write(new_mae)

            if i == 0:
                # Save the path of the newly created file.
                self.path = new_name

    def extract_energy(self, block):
        """
        Extracts the energy value from a ``.mae`` energy data block.
        Parameters
        ----------
        block : :class:`str`
            An ``.mae`` energy data block.
        Returns
        -------
        :class:`float`
            The energy value extracted from `block` or ``None`` if
            one is not found.
        """

        block = block.split(":::")
        for name, value in zip(block[0].split('\n'),
                               block[1].split('\n')):
            if 'r_mmod_Potential_Energy' in name:
                return float(value)

    def lowest_energy_conformers(self, n):
        """
        Returns the id and energy of the lowest energy conformers.
        Parameters
        ----------
        n : :class:`int`
            The number of lowest energy conformers to return.
        Returns
        -------
        :class:`list`
            A :class:`list` of the form
            .. code-block:: python
                returned = [(23, 123.3), (1, 143.89), (12, 150.6), ...]
            Where each :class:`tuple` holds the id and energy of the
            `n` lowest energy conformers, respectively.
        """

        # Open the .mae file holding all the conformers and load its
        # content.
        with open(self.mae_path, 'r') as mae_file:
            self.content = mae_file.read()
            # Split the content across curly braces. This divides the
            # various sections of the .mae file.
            content_split = re.split(r"[{}]", self.content)

        # Go through all the datablocks in the the .mae file. For each
        # energy block extract the energy and store it in the
        # `energies` list. Store the `index`  (conformer id) along with
        # each extracted energy.
        self.energies = []
        prev_block = deque([""], maxlen=1)
        index = 1
        for block in content_split:
            if ("f_m_ct" in prev_block[0] and
                    "r_mmod_Potential_Energy" in block):
                energy = self.extract_energy(block)
                self.energies.append((energy, index))
                index += 1

            prev_block.append(block)

        # Selecting the lowest energy n conformers
        confs = sorted(self.energies)[:n]
        # Define the energy of the lowest energy conformer
        self.min_energy = confs[0][0]
        # Return a list with id and energy of the lowest energy
        # conformers.
        return confs

    def maegz_to_mae(self):
        """
        Converts the .maegz file to a .mae file.
        Returns
        -------
        None : :class:`NoneType`
        """

        self.mae_path = self.maegz_path.replace('.maegz', '.mae')
        with gzip.open(self.maegz_path, 'r') as maegz_file:
            with open(self.mae_path, 'wb') as mae_file:
                mae_file.write(maegz_file.read())
